var express = require('express');
var router = express.Router();
var NodeCache = require('node-cache');
var employee = require('../controllers/EmployeeController');
var leave = require('../controllers/LeaveController');
var reset = require('../controllers/ResetPasswordController');
var files = require('../controllers/FileController');
var salary = require('../controllers/SalaryController');
var auth = require('../middleware/verifyToken');
const { userValidationRules, validate } = require('../middleware/validateInput');
const { validateUser } = require('../middleware/validateNewUser');
const { validateEditUser } = require('../middleware/validateEditUser');
const verification = require('../middleware/checkUserVerified');
var bodyParser = require('body-parser');
var urlencodedParser = bodyParser.urlencoded({ extended: false });
var testJson = (req, res, next) => {
    const content = req.headers['content-type'];
    console.log("test Json request header is == " + content);
    next();
};
router.get('/', testJson, employee.index);
router.get('/clear-cache', (req, res) => {
    var myCache = new NodeCache();
    myCache.clear();
    console.log('Cache cleared.');
    res.send('Cache cleared successfully.');
});
router.post('/employees/forgotPassword', [urlencodedParser], reset.forgot_pwd);
router.post('/employees/verifyforgotPin', [urlencodedParser], reset.verify_reset);
router.post('/employees/resetPassword', [urlencodedParser], reset.resetPwd);
router.post('/employees/resendToken', [urlencodedParser], employee.resend_token);
router.post('/employees/addEmployee', [urlencodedParser, validateUser], employee.register);
router.post('/employees/verifyEmployee', [urlencodedParser], employee.verifyMail);
router.post('/employees/login', [urlencodedParser], employee.login);
router.put('/employees/updateEmployee/:name', [auth, urlencodedParser, validateEditUser, verification], employee.editProfile);
router.post('/employees/uploadPicture', [auth, verification, urlencodedParser], files.uploadPic);
router.get('/verifyToken', [testJson, auth], employee.verify);
router.post('/employees/logout', [auth, verification, urlencodedParser], employee.logout);
router.get('/employees/mySalary/:name', [auth, verification], salary.mySalaryBreakDown);
router.get('/employees/downloadSalary', [auth, verification], salary.download);
router.get('/leaves/myLeaves/:id', [auth, urlencodedParser, verification], leave.getLeave);
router.get('/leaves/myLeaves', [auth, verification], leave.getLeaves);
router.post('/leaves/createLeave', [auth, urlencodedParser, userValidationRules(), validate, verification], leave.createLeave);
router.post('/leaves/requestLeave/:id', [auth, urlencodedParser, verification], leave.requestLeave);
router.post('/leaves/cancelLeave/:id', [auth, urlencodedParser, verification], leave.cancelLeave);
module.exports = router;
//# sourceMappingURL=employeeRoutes.js.map